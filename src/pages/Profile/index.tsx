import { useEffect, useState } from "react";
import Layout from "../../components/layout/Layout";
import { authService } from "../../services/authService"; // file api b·∫°n ƒë√£ c√≥
import type { UserProfile } from "../../types";
import { useAuth } from "../../stores/authStore";
import { useAuthActions } from "../../hooks/useAuthActions";
// üí° B∆Ø·ªöC 1: Import icon User t·ª´ lucide-react
import { User } from 'lucide-react'; 

const InputField = ({ label, value }: { label: string; value: string | number | undefined }) => (
  <div className="flex flex-col">
    <label className="text-gray-300 text-sm font-medium mb-1">{label}:</label>
    <input
      type="text"
      defaultValue={value || ""}
      className="p-2 border border-gray-600 rounded-md bg-slate-700 text-white focus:ring-yellow-500 focus:border-yellow-500"
      disabled // T·∫°m th·ªùi kh√≥a ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu
    />
  </div>
);

const Profile = () => {
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { user } = useAuth();
  const { logout } = useAuthActions();

  useEffect(() => {
    const fetchProfile = async () => {
      if (!user?.id) return;
      try {
        const data = await authService.getProfile(user.id);
        console.log("Profile API data:", data);
        setProfile(data);
      } catch (err) {
        console.error("L·ªói khi l·∫•y profile:", err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchProfile();
  }, [user?.id]);

  // C√°c h√†m x·ª≠ l√Ω h√†nh ƒë·ªông (c·∫ßn implement logic)
  const handleSaveInfo = () => {
    alert("Ch·ª©c nƒÉng L∆∞u th√¥ng tin ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!");
  };

  const handleChangePassword = () => {
    alert("Ch·ª©c nƒÉng ƒê·ªïi m·∫≠t kh·∫©u ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!");
  };
  
  const handleLogout = () => {
    logout(); // G·ªçi h√†m ƒëƒÉng xu·∫•t t·ª´ Auth Store
  }

  // --- Loading v√† Error States ---

  if (isLoading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center text-white">
          ƒêang t·∫£i th√¥ng tin...
        </div>
      </Layout>
    );
  }

  if (!profile) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center text-red-400">
          Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i.
        </div>
      </Layout>
    );
  }

  // --- Main Render ---

  // L·∫•y c√°c tr∆∞·ªùng d·ªØ li·ªáu c·∫ßn thi·∫øt t·ª´ profile
  const fullName = profile.username || "Ch∆∞a c·∫≠p nh·∫≠t";
  const dateOfBirth = profile.dateOfBirth || "";
  const phoneNumber = profile.phoneNumber || "";
  const email = profile.email || "";
  const loyaltyPoint = profile.loyaltyPoint ?? 0; // ƒêi·ªÉm th∆∞·ªüng
  const rank = profile.rank || "M·ªõi"; // H·∫°ng th√†nh vi√™n

  return (
    <Layout>
      <div className="min-h-screen bg-slate-900 text-white pt-20 pb-10" style={{ backgroundImage: `url('path/to/your/background-image.jpg')`, backgroundSize: 'cover' }}>
        <div className="max-w-4xl mx-auto bg-slate-800 rounded-xl shadow-2xl p-6 md:p-10 flex flex-col md:flex-row gap-8">
          
          {/* C·ªòT B√äN TR√ÅI: AVATAR V√Ä TH√îNG TIN T√ìM T·∫ÆT */}
          <div className="md:w-1/3 flex flex-col items-center p-4 bg-slate-700 rounded-lg shadow-inner">
            
            {/* V√πng Avatar */}
            <div className="relative w-32 h-32 mb-4">
                {/* üí° B∆Ø·ªöC 2: Thay th·∫ø th·∫ª <img> b·∫±ng logic ƒëi·ªÅu ki·ªán */}
                {profile.avatarUrl ? (
                  <img
                    src={profile.avatarUrl}
                    alt="Avatar"
                    className="w-full h-full rounded-full border-4 border-yellow-400 object-cover"
                  />
                ) : (
                    // Hi·ªÉn th·ªã icon User khi kh√¥ng c√≥ URL
                  <div className="w-full h-full rounded-full border-4 border-yellow-400 bg-gray-600 flex items-center justify-center">
                    <User className="w-16 h-16 text-white" />
                  </div>
                )}

                {/* Gi·∫£ l·∫≠p th√†nh vi√™n "B·∫°c" */}
                <div className="absolute top-0 left-1/2 -translate-x-1/2 mt-[-10px] bg-gray-300 text-slate-800 text-xs font-bold py-1 px-3 rounded-full shadow-md">
                  Th√†nh vi√™n "{rank}"
                </div>
            </div>

            <p className="text-2xl font-bold mb-1 text-center">{fullName}</p>
            <p className="text-gray-400 text-sm mb-4">@{profile.username}</p>

            {/* N√∫t Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán */}
            <button className="text-purple-300 hover:text-purple-400 border border-purple-300 px-3 py-1 rounded-md text-sm mb-6 transition duration-200">
              Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán
            </button>

            {/* T√≠ch ƒëi·ªÉm th√†nh vi√™n */}
            <div className="w-full mb-6">
              <p className="text-sm font-medium mb-1">T√≠ch ƒëi·ªÉm th√†nh vi√™n: {loyaltyPoint}/1000</p>
              <div className="w-full bg-gray-600 rounded-full h-2.5">
                <div 
                  className="bg-yellow-400 h-2.5 rounded-full" 
                  style={{ width: `${Math.min((loyaltyPoint / 1000) * 100, 100)}%` }} // T·ªëi ƒëa 100%
                ></div>
              </div>
            </div>

            {/* N√∫t Xem l·ª£i √≠ch */}
            <button className="w-full py-2 mb-4 bg-green-600 hover:bg-green-700 rounded-md font-semibold transition duration-200">
              Xem l·ª£i √≠ch
            </button>
            
            {/* N√∫t ƒêƒÉng xu·∫•t */}
            <button 
              onClick={handleLogout} 
              className="w-full py-2 bg-red-600 hover:bg-red-700 rounded-md font-semibold transition duration-200"
            >
              ƒêƒÉng xu·∫•t
            </button>

          </div>

          {/* C·ªòT B√äN PH·∫¢I: FORM TH√îNG TIN V√Ä ƒê·ªîI M·∫¨T KH·∫®U */}
          <div className="md:w-2/3 p-4">
            
            <h2 className="text-2xl font-bold text-yellow-400 mb-6">TH√îNG TIN KH√ÅCH H√ÄNG</h2>

            {/* V√πng 1: Th√¥ng tin c∆° b·∫£n */}
            <div className="space-y-4 mb-8 border-b border-gray-600 pb-6">
              <h3 className="text-xl font-semibold mb-3">Th√¥ng tin c∆° b·∫£n:</h3>
              <InputField label="H·ªç v√† t√™n" value={fullName} />
              <InputField label="Ng√†y sinh" value={dateOfBirth} />
              <InputField label="S·ªë ƒëi·ªán tho·∫°i" value={phoneNumber} />
              <InputField label="Email" value={email} />
              
              <div className="flex justify-end pt-2">
                <button 
                  onClick={handleSaveInfo} 
                  className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
                >
                  L∆∞u th√¥ng tin
                </button>
              </div>
            </div>

            {/* V√πng 2: ƒê·ªïi m·∫≠t kh·∫©u */}
            <div className="space-y-4">
              <h3 className="text-xl font-semibold mb-3">ƒê·ªïi m·∫≠t kh·∫©u:</h3>
              <InputField label="M·∫≠t kh·∫©u c≈©" value="" /> {/* Lu√¥n ƒë·ªÉ tr·ªëng */}
              <InputField label="M·∫≠t kh·∫©u m·ªõi" value="" /> {/* Lu√¥n ƒë·ªÉ tr·ªëng */}
              <InputField label="X√°c th·ª±c m·∫≠t kh·∫©u" value="" /> {/* Lu√¥n ƒë·ªÉ tr·ªëng */}
              
              <div className="flex justify-end pt-2">
                <button 
                  onClick={handleChangePassword} 
                  className="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition duration-200"
                >
                  ƒê·ªïi m·∫≠t kh·∫©u
                </button>
              </div>
            </div>

          </div>
        </div>
      </div>
    </Layout>
  );
};

export default Profile;
